---
layout: post
title: "操作系统笔记一：进程"
description:
tags: [process, Computer Science, Operating System, note]
categories: [ Computer Science, Operating System]
image:
  feature: 46882263_p0.jpg
  credit: "私服 | dEi [pixiv]"
  creditlink: "http://www.pixiv.net/member_illust.php?mode=medium&illust_id=46882263"
---
进程是一个程序运行中的实例，对进程的管理，如CPU分配，内存空间分配等等是操作系
统的重要内容。主要是小学期的内容，现在来总结一下。


# 计算机多任务系统
现在的计算机系统大部分是多任务系统(multiprogramming),可以参考
[MULTICS](http://en.wikipedia.org/wiki/Multics):

* 并发(Concurrency, 或者伪并行pseudo parallelism)是通过对单一CPU上执行
  的进程进行调配而实现的。(一个人吃三个馒头)
* 并行(Parallelism)是通过物理上的多CPU来实现的。(三个人吃三个馒头)

多任务系统需要上下文切换(context switching)来调整进程的执行，然而这种
方式会带来开销(overhead)。
上下文切换：中止并保存当前进程，然后启动/重启另一个进程
操作系统通过调用器(dispatcher)与排程器(scheduler)来进行进程管理：

* 分配/保护资源
* 插入进程
* 支持进程间通信


# 进程



每个进程都包括：

- 程序代码
- 数据，包括堆(stack)跟栈(heap)的数据
- 进程控制块(process control block, PCB)

PCB保存所有有关于进程管理的信息，对于多任务系统中的上下文切换而言，PCB是必不可少的。在后面我们会讨论一下PCB的内容。

## 进程的状态(state)
进程在它的生命周期中，会在不同的状态之间切换。
一个常见的进程状态转换图如下：

![process.jpg]({{ site.url }}images/process.jpg)

* 状态为`running` 的进程占用CPU
* 状态为`block` 的进程无法继续执行，比如正在等待I/O
* 状态为`ready` 的进程等待CPU变得可用
* 状态为`new` 的进程刚刚被创建，等待被处理
* 状态为`terminated` 的进程已经结束，不过数据仍然有可能被暂时留在内存中
* 状态为`suspended` 的进程被交换(swap)出去了

状态转换包含如下：

1. `new` -> `ready`: 接纳新创建的进程
2. `running` -> `blocked`: 进程被阻塞，等待IO或者系统调用
3. `ready` -> `running`: 进程被排程器选中执行
4. `block` -> `ready`: 事件发生了，比如IO操作结束，进程回到等待状态等待被调用
5. `running` -> `ready`: 进程被抢占
6. `running` -> `exit`: 进程结束

进程的生命周期：

![process2.jpg]({{ site.url }}images/process2.jpg)

中断(interrupt)，陷阱(traps),系统调用(system call)都是在如上的状态转换的基础上实现的。

## 进程的创建与终止

操作系统负责创建进程，如下的事件发生时可以创建进程：

+ 系统初始化的时候创建后台与前台进程
+ 用户请求
+ 批处理任务(注：这是windows下的说法，linux下的是shell脚本?)
+ 其他进程创建

如下的系统调用命令可以用来创建子进程：

+ *NIX系统下`fork()`可以创建一个父进程的完整拷贝，然后使用`exec`来执行
+ windows系统下使用`NTCreateProcess()`API
+ Linux下使用`clone()`

同样的，操作系统也负责终止进程。如下的事件发生时终止进程：

+ 进程正常退出
+ 错误：`ERROR`,比如说空间不足
+ 错误：`FATAL`,程序bug
+ 被父进程或者其他被授权的进程杀死（`KILL`）

在进程终止时，需要使用系统调用来通知操作系统进程终止，然后释放被分配的资源，冲刷掉输出，以及执行可能的系统操作指令。

如下的系统调用命令可以终止进程：

+ *NIX, Linux:`exit()`,`kill()`
+ Windows: `TerminateProcess()`

## 进程的实现
操作系统通过*表*来维护资源的状态：

+ 内存表：内存分配，内存保护以及虚拟内存等等
+ I/O表：可用性，状态，信息转换
+ 文件表：位置，状态
+ 进程表：进程控制块

这些表可以被交叉引用。

## PCB与进程表
PCB包含一些进程管理时必要的属性。通常而言，包含如下几个类别：

+ 进程区分：PID，UID，父进程的PID等
+ 进程状态：用户注册，程序计数，堆栈指针，程序状态,内存管理，文件等等
+ 进程控制信息：进程状态，排程信息等等

PCB必须被保护，否则可能带来一系列严重的问题。

进程表负责管理所有进程的PCB,当进程被中断/切换的时候，操作系统会更新进程表中的PCB信息。而在进程创建之前，进程表中会为之分配一个入口。


## 上下文切换
上下文切换发生的时候，系统会将原来进程的状态与内容保存起来，然后读入新
的进程所要执行的内容，这个读写操作会产生开销。
如下的事件会触发上下文切换：

+ 进程内中断(interrupt):计时器，I/O，page fault等
+ 由于错误或者异常而导致的陷阱(traps)
+ 系统调用，比如I/O请求

# 进程排程算法

操作系统负责管理进程的排程：

- 决定何时接受进程进入系统（`new` -> `ready`）
- 决定哪一个进程接下来将被执行(`ready` -> `run`)
- 决定哪一个，以及何时进程将被中断(`interrupt` -> `ready`)

以上操作需要排程器与执行器的支持，排程器运行的算法称之为排程算法(scheduling algorithm)，根据操作系统的不同而有所区别。


根据优先权分类：

- 非抢占式算法(non-preemtive)：进程只会被自发地中断，比如说IO与"nice"的系统调用。
实例： Windows3.1, DOS

- 抢占式算法(preemtive)：进程可以被强制或者自发地中断，这需要上下文切换的支持。
这种算法的好处是可以避免进程独占cpu资源，坏处是上下文切换会带来开销。目前大多数主流操作系统都使用优先权算法。


## 评价标准

面向用户的评价标准：

- 响应时间(response time)：从创建任务到第一次执行之间的时间
- 运行时间(turnaround time): 从创建任务到完成之间的时间
- 可预测性(predictability): 运行时间的差异性（可以用方差来表示？）

面向系统的评价标准：

- 吞吐量(throughput): 每小时处理任务的数量
- 公平性(fairness): 处理能力/等待时间是否平均分布？是否存在等待时间过长的进程？

在下面我们主要使用平均响应时间与平均运行时间来衡量排程算法。


## 先进先执行(First in first serve)
先进先执行是一个非抢先式算法，使用严格队列机制(strict queueing mechanism)，即其按照任务加入任务队列的顺序执行任务。

- 优势：在位置上是公平的，且易于实现
- 劣势：容易造成长队列，以及造成系统资源之间的竞争

![]({{ site.url }}images/first-in-first-serve.jpg)

## 最短任务优先(Shotest job first)
最短任务优先算法同样也是一个非抢先式算法，将所有任务以所需时间排序，将耗时最小的任务首先执行。

- 优势：总是会有最好的运行时间
- 劣势：
    可能会导致饥饿(starvation)的发生:紧急的任务得不到优先执行；
    需要牺牲公平性与可预测性；
    必须预先得知进程执行时间。

![]({{ site.url }}images/shortest-first.jpg)

## 循环算法(Round-Robin)

循环算法是先进先执行算法的一个抢占式版本。它依然按照进程创建的顺序执行进程，但是在经过了一段时间间隔后，操作系统会强制切换到下一个进程。

- 优势：缩短了响应时间，而且在当前主流的分时操作系统下效率良好
- 劣势：
　　　　增加了上下文切换的开销；
　　　　比起同IO绑定的进程(运行时间短)更加偏向同CPU绑定的线程(运行时间长)；
　　　　最差情况下会变成先进先执行算法。

使用循环算法时，切换的时间间隔需要小心设计。

![]({{ site.url }}images/round-robin.jpg)

## 优先级队列(Priority Queues)

优先级队列也是一个抢先式算法，它将所有的任务按照优先级排列。优先级通常存储在进程的PCB里，而且可以动态改变。

- 优势：可以优先执行同IO绑定的任务
- 劣势：对于静态的优先级而言，低优先级的任务可能会被放置过久。

![]({{ site.url }}images/priority-queue.jpg)

# 线程(thread)与进程(process)

进程包含两个基础单元：

- 资源(resource)：包括包含进程镜像的（虚拟的）地址空间（比如程序，数据，堆，栈等等）
- 文件(file)，IO设备，IO通道等等

一个进程可以在多个执行追踪之间共享资源，比如多线程在同一资源环境下的共享。

每个线程都有自己的执行上下文(execution contest)，比如说程序容器，寄存器等等。所有的线程都有权使用进程的共享资源。

线程通常是合作完成同一目标。

有的CPU对多线程有着硬件层面的支持。

## 进程与线程的区别

同进程类似的，线程同样有：

- 状态以及转换函数(new, running, blocked, ready, terminated)
- 线程控制块(thread control block)

相比较而言，线程在创建/终止/切换的开销比进程小(地址空间在同一进程中是一样的)。

线程间通信通常比进程间通信来的快(通过内存共享实现，而进程常常需要消息机制)，不存在保护边界（因为线程是合作的，属于同一用户并且实现同一目标）。因此，我们在设计多线程程序的时候需要仔细考虑同步性。

<table summary="进程与线程共享资源的区别">
  <tr>
    <th>进程</th>
    <th>线程</th>
  </tr>
  <tr>
    <td>地址空间</td>
    <td>程序计数器(指令地址寄存器)</td>
  </tr>
  <tr>
    <td>全局变量</td>
    <td>寄存器</td>
  </tr>
  <tr>
    <td>打开的文件</td>
    <td>栈</td>
  </tr>
  <tr>
    <td>子进程</td>
    <td>状态</td>
  </tr>
  <tr>
    <td>挂起警报</td>
    <td>本地变量</td>
  </tr>
  <tr>
    <td>信号与信号处理器</td>
    <td></td>
  </tr>
  <tr>
    <td>计数信息</td>
    <td></td>
  </tr>
</table>


多线程主要用于如下场景：
- 一系列的相关操作需要一些同样的资源，而这些资源需要被分享
- 进程中会有很多阻塞任务，比如IO操作或者内存操作

进程的一些替代：

- 顺序执行追踪(sequential execution trace)
- 多进程
- 非阻塞系统调用


操作系统的线程实现通常分为用户线程，核心线程与混合线程。

## 用户线程

## 核心线程

## 混合线程




