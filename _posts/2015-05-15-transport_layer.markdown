---
layout: post
title: "Transport Layer"
date: "2015-05-15 21:00:24 +0800"
modified: 
description: "notes for transport layer"
categories: [Computer Science, Network]
tags: [transport layer, cs, notes]
image:
  feature: 2473257.jpg
  credit: ※このあとナギ様が美味しくいただきました。 | 群青ピズ [pixiv]
  creditlink: http://www.pixiv.net/member_illust.php?mode=medium&illust_id=2473257
comments: 
---


传输层协议，看起来主要就是TCP的内容。单纵就是干！

# 简介

传输层协议主要提供了不同主机上的应用程序之间的交流能力。在终端主机上运
行。

发送者:将应用信息分段，传给网络层
接收者：将段重新汇编为信息，传给应用层

在因特网上，主要是TCP与UDP两种。


# TCP与UDP

## 用户数据报协议(User Datagram Protocal,UDP)

IP上的很薄的一层。加入了校验和与包长度，用于防止包损坏；加入了源端口与
目标端口，用于可能的特殊应用。

UDP是不可靠的。

组成：
16比特源端口，16比特目标端口，16比特长度，16比特校验和。


## 传输控制协议(Transmission Control Protoacal, TCP)

传输控制协议提供远比UDP可靠的通信手段。


连接使用三次握手方式创建，数据被操作系统分成包并且标号，接收包的时候要
返回已接收信息。连接必须被明确地关闭。

### 七个主要特性

1. 面向连接
2. 点对点
3. 完全可信，接收的数据就是发送的数据
4. 完全双向通信
5. 流接口
6. 可靠的连接建立过程
7. 优雅的(……)关闭过程

### 建立链接

使用特殊的同步(SYN)与结束(FIN)信息来打开/关闭连接，同时确认两边都接受
了所有的数据。

A      ---SYN(SeqNo=x)--->        B

  <---SYN(SeqNo=y, AckNo=x+1)---
  
  ---(SeqNo=x+1, AckNo=y+1)---> 

（看
[维基](http://zh.wikipedia.org/wiki/%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE)吧ppt实在太坑了……）

### 传输信息

维基的例子：


1. 发送方首先发送第一个包含序列号为1（可变化）和1460字节数据的TCP报文段给接收方。接收方以一个没有数据的TCP报文段来回复（只含报头），用确认号1461来表示已完全收到并请求下一个报文段。
2. 发送方然后发送第二个包含序列号为1461和1460字节数据的TCP报文段给接收方。正常情况下，接收方以一个没有数据的TCP报文段来回复，用确认号2921（1461+1460）来表示已完全收到并请求下一个报文段。发送接收这样继续
下去。
3. 然而当这些数据包都是相连的情况下，接收方没有必要每一次都回应。比如，他收到第1到5条TCP报文段，只需回应第五条就行了。在例子中第3条TCP报文段被丢失了，所以尽管他收到了第4和5条，然而他只能回应第2条。
4. 发送方在发送了第三条以后，没能收到回应，因此当时钟（timer）过时（expire）时，他重发第三条。（每次发送者发送一条TCP报文段后，都会再次启动一次时钟：RTT）。
5. 这次第三条被成功接收，接收方可以直接确认第5条，因为4，5两条已收到。


### 关闭连接

连接终止使用了四路握手过程（four-way handshake），在这个过程中每个终端的连接都能独立地被终止。因此，一个典型的拆接过程需要每个终端都提供一对FIN和ACK。

A  ---FIN--->  B

   <---ACK---
   
   <---FIN---
   
   ---ACK--->

# TCP的可靠性机制

## 顺序

动态路由可能会导致包并非顺序到达，TCP通过给予每个包一个序号来确保它们可以按顺序排列。这个序列号也可以用来侦测包的重复与缺失。


## 重新传输

发送方发送某个包后开始计时，如果超过一段时间没有得到响应则重发包。有一
定的尝试次数。接收方处理重复包。有的时候，在上一个会话的包会延迟抵达，
而此时下一个会话如果有相同的顺序号，就会出现重复问题，解决方案是同时标
记会话号。

## 流控制

数据超出往往在发送方传输速度大于接收方接受速度时发生。一个简单的方法是
在发送下一个之前对每个包进行接收通知(ack)，但是这个会带来带宽浪费。

TCP使用窗口机制。发送方与接收方约定一个窗口大小(包的数量)，在初始，一
整个窗口被发送，之后每个包被通知，然后另外一个才可以发送。接收方发送可
以接受的窗口大小。窗口大小为0则说明发送方需要在进一步的通知之前停止发
送。


TCP协议在工作时，如果发送端的TCP协议软件每传输一个数据分组后，必须等待接收端的确认才能够发送下一个分组，由于网络传输的时延，将有大量时间被用于等待确认，导致传输效率低下。为此TCP在进行数据传输时使用了滑动窗口机制。

TCP滑动窗口用来暂存两台计算机间要传送的数据分组。每台运行TCP协议的计算机有两个滑动窗口：一个用于数据发送，另一个用于数据接收。发送端待发数据分组在缓冲区排队等待送出。被滑动窗口框入的分组，是可以在未收到接收确认的情况下多送出的部分。滑动窗口左端标志X的分组，是已经被接收端确认收到的分组。随着新的确认到来，窗口不断向右滑动。

TCP协议软件依靠滑动窗口机制解决传输效率和流量控制问题。它可以在收到确认信息之前发送多个数据分组。这种机制使得网络通信处于忙碌状态，提高了整个网络的吞吐率，它还解决了端到端的通信流量控制问题，允许接收端在拥有容纳足够数据的缓冲之前对传输进行限制。在实际运行中，TCP滑动窗口的大小是可以随时调整的。收发端TCP协议软件在进行分组确认通信时，还交换滑动窗口控制信息，使得双方滑动窗口大小可以根据需要动态变化，达到在提高数据传输效率的同时，防止拥塞的发生。　称窗口左边沿向右边沿靠近为窗口合拢，这种现象发生在数据被发送和确认时。

当窗口右边沿向右移动时将允许发送更多的数据，称之为窗口张开。这种现象发生在另一端的接收进程读取已经确认的数据并释放了TCP的接收缓存时。

当右边沿向左移动时，称为窗口收缩。Host Requirements RFC强烈建议不要使用这种方式。但TCP必须能够在某一端产生这种情况时进行处理。
如果左边沿到达右边沿，则称其为一个零窗口。

1. 发送方不必发送一个全窗口大小的数据。
2. 来自接收方的一个报文段确认数据并把窗口向右边滑动，这是因为窗口的大小是相对于确认序号的。
3. 窗口的大小可以减小，但是窗口的右边沿却不能够向左移动。
4. 接收方在发送一个ACK前不必等待窗口被填满。

-- 百度百科

## 防止拥堵

转换器信号与丢包都可以认为是网络拥堵的标志。TCP通过丢包来监控网络拥堵。对于第一个丢包，TCP将发送一个小信息。如果这个信息没有丢失，数据大小加倍，以此类推，直到窗口大小的一半，停止倍增。
