---
layout: post
title: "Application Layer"
date: "2015-05-15 22:06:18 +0800"
modified: 
description: "notes for communication layer"
categories: [Computer Science, Network]
tags: [application layer]
image:
  feature: 50388846.jpg
  credit: 榛名は大丈夫です！ | YAMAno [pixiv]
  creditlink: http://www.pixiv.net/member_illust.php?mode=medium&illust_id=50388846
comments: 
---

关于应用层，最后一篇……終わった……小天使求治愈www


# 网络应用原则

在处理应用时，我们需要考虑的是丢包，流量，是否时间敏感等等

## 应用架构

### 客户端-服务端
服务端：一直运行的主机，拥有固定IP地址，是数据中心。

客户端：可以同服务器通信，可以任意时刻链接，可能有动态IP地址，不需要互
相之间直接交流


### P2P

不存在总是上线的服务器，各种终端系统自由交流。终端从别的终端得到服务，
同时也向他人提供服务。各个终端间歇性地连接在一起，需要复杂的管理手段。

## 套接字(socket)

终端通过套接字发送/接收信息

地址处理：通过IP地址与接口号可以确定在主机上的程序。



# Web与HTTP

## 超文本传输协议 HTTP:Hypertext transfer protocal

网络的应用层协议，建立在C/S模型上。

- 客户端：发送浏览请求，通过http接受请求，然后展示网络对象。
- 服务端：服务端根据请求返回网络对象

使用TCP协议：

- 客户端初始化TCP连接，端口为80
- 服务端接受客户端连接
- HTTP消息在浏览器与服务器之间传输
- 结束TCP连接

HTTP是"无状态"(stateless)的：服务端不需要保存过去的客户端请求。

## 用户-服务器状态：cookies

许多网站使用cookies。
Cookie，有时也用其复数形式Cookies，指某些网站为了辨别用户身份、进行
session跟踪而储存在用户本地终端上的数据（通常经过加密）。定义于RFC2109
和2965都已废弃，最新取代的规范是RFC6265。服务器可以利用Cookies包含信息的任意性来筛选并经常性维护这些信息，以判断在HTTP传输中的状态。Cookies最典型的应用是判定注册用户是否已经登录网站，用户可能会得到提示，是否在下一次进入此网站时保留用户信息以便简化登录手续，这些都是Cookies的功用。另一个重要应用场合是“购物车”之类处理。用户可能会在一段时间内在同一家网站的不同页面中选择不同的商品，这些信息都会写入Cookies，以便在最后付款时提取信息。

cookie头保存HTTP返回信息与下一个请求信息，cookie文件被用户主机所保存，
由用户浏览器管理。cookie与协议终点来共同维护状态。


## 网络缓存(代理服务器)

目的：在不打扰服务端的情况下满足客户端需求。

浏览器将所有的HTTP请求发送给缓存服务器。如果网络对象在缓存里，则直接返
回该对象；如果不在缓存里，则向源服务器发送请求，然后将对象保存在缓存里。

使用缓存可以减少请求-返回的时间，同时减少了信息交通量。缓存同时使得
“贫穷的”内容提供商可以有效地提供内容。

缓存同时保存一份最晚更新时间，当连接到服务器时，检查一下时间，如果不是
最新的，则更新缓存。

# 电子邮件

## SMTP
三个主要组成：

- 用户代理(邮件阅读器):创建，编辑，读取邮件信息，发送与传入信息存储在
  服务器上
- 邮件服务器：信箱(mailbox)保存用户的传入信息，消息队列(message queue)
  用于保存传出信息。
- 简单邮件传送协议：SMTP(simple mail transfer protocal)：client-发送邮
  件服务器，server-接收邮件服务器

使用TCP传输，端口25。

从发送服务器到接收服务器直接传输

三个传输步骤：

1. 握手
2. 传输信息
3. 关闭

命令/回应交互

命令：ASCII文本
回应：状态码与短语

消息必须以7bitASCII文本传输。

SMTP以CRLF来判断信息终止。

信息格式：

头部+空行+信息主题

头部：To From Subject，不同与SMTP的FROM, RCPT, TO命令

主体：ASCII文本信息

## 邮件接入协议(mail access protocal)

邮件接入协议：POP,IMAP,HTTP

- POP3：下载-保存，将信息在客户端保存一份副本
- IMAP：所有的信息保存在服务器，允许用户以文件夹形式组织信息，通过会话
  保存用户状态


# 域名系统(Domain Name System, DNS)

分布式的数据库，通过许多命名服务器(name server)的层级关系实现。应用层
协议，主机与命名服务器交流来解析域名。

DNS（Domain Name System，域名系统），因特网上作为域名和IP地址相互映射的一个分布式数据库，能够使用户更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串。通过主机名，最终得到该主机名对应的IP地址的过程叫做域名解析（或主机名解析）。DNS协议运行在UDP协议之上，使用端口号53。在RFC文档中RFC 2181对DNS有规范说明，RFC 2136对DNS的动态更新进行说明，RFC 2308对DNS查询的反向缓存进行说明。


## 层级

1. 根服务器(root name server)
2. com,org,edu...顶级服务器
3. 授权DNS服务器(authoritative DNS Server)
4. 本地DNS服务器(local DNS Server)

## 解析顺序

主机->本地DNS->根服务器->顶级服务器->授权DNS服务器->目标主机

## 缓存

当一个命名服务器建立了映射，他会将该映射缓存。主要而言，本地服务器将缓
存这些映射以减轻根服务器与顶级服务器的压力。

但是，缓存可能过期，这会导致寻找不到目标主机。RFC2136标准定义了缓存更
新/通知机制。

# P2P应用

## 纯P2P架构

- 没有一直运行的服务器
- 任意数量的终端直接连接
- 终端之间间歇性的链接，可能改变IP地址。

例子：

- 文件分布(BitTorrent, BT协议)
- 流媒体(迅雷看看？！)
- VoIP(Skype)

### 文件分布：C/S vs P2P

在C/S架构下，上传下载数度有一个极限。

对于服务器来说，必须持续地上传N个文件副本。

- 传送一个副本：$F / u_s$
- 传送多个副本：$NF / u_s$

对于客户端来说，每个客户端都需要下载一份文件

最小下载时间： $F / d_{min}$

我们可以得到总时间为：

$ D\_{c-s} \geq max \lbrace NF / u\_s, F / d_{min} \rbrace $

其中N是线性增长的。

P2P架构下，服务器需要上传至少一个副本，客户端下载时间同上，对于多个分
布式系统而言，他们总共需要上传$NF$大小的文件量，最大上传速度为$u_s + \Sigma u_i$

总时间为：

$ D\_{p2p} \geq max \lbrace F / u\_s, F / d\_{min}, NF / (u\_s + \Sigma u_i) \rbrace $

N的线性增长在某种程度上被$\Sigma u_i$所抵消。

### BitTorrent协议

文件被分割成256kb的小段，各个终端收发文件段。有一个追踪服务器来保存当
前参与torrent的终端的列表，当一个终端进入此网络时，它更新终端列表，
然后开始同这些终端交换文件段。一般而言，终端只跟总终端的某个子集(邻居)
进行文件交换。

刚进入网络的终端可能没有任何文件段，但是随着时间推移他会收到文件段直到完成传输。

请求文件段：

在任意给定的时间，不同的终端都有不同的文件子集。终端向其他终端请求传输
他们有的文件块，优先请求最珍稀的。

发送文件段：tit-for-tat

终端向正在给他发送文件段的4个终端以最高速度发送文件，每10秒钟重新计算最高速度的四个终端。
每30秒钟随机选择一个终端，开始发送文件段。


